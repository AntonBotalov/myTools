import streamlit as st
import random
import string
from difflib import SequenceMatcher
import html
import streamlit.components.v1 as components
import jwt
import json
from jwt.exceptions import InvalidTokenError
import uuid  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è uuid

st.set_page_config(page_title="–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞", layout="wide")

cyrillic_letters = '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'
latin_letters = string.ascii_lowercase
special_chars = string.punctuation + string.digits

AVAILABLE_ALGORITHMS = ["HS256"]

def get_highlighted(text_base, text_compare):
    matcher = SequenceMatcher(None, text_base, text_compare)
    result = []
    for opcode, a0, a1, b0, b1 in matcher.get_opcodes():
        if opcode == 'equal':
            result.append(html.escape(text_compare[b0:b1]))
        elif opcode == 'insert':
            result.append(f"<span style='background-color:#008000'>{html.escape(text_compare[b0:b1])}</span>")
        elif opcode == 'replace':
            result.append(f"<span style='background-color:#ff0000'>{html.escape(text_compare[b0:b1])}</span>")
        elif opcode == 'delete':
            pass
    return ''.join(result)

def copy_to_clipboard(text, key):
    components.html(f"""
        <script>
        function copyText() {{
            navigator.clipboard.writeText(`{text}`).then(() => {{
                const btn = document.getElementById('{key}');
                btn.innerText = '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ';
                setTimeout(() => btn.innerText = 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å', 1500);
            }});
        }}
        </script>
        <button id="{key}" onclick="copyText()" style="margin: 5px 0; padding: 6px 14px; border-radius: 6px; background-color: #21A038; color: white; border: none; cursor: pointer;">üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
    """, height=45)

tabs = st.tabs(["üé≤ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤", "üî† –†–µ–≥–∏—Å—Ç—Ä—ã —Ç–µ–∫—Å—Ç–∞", "üßÆ –ü–æ–¥—Å—á—ë—Ç —Å–∏–º–≤–æ–ª–æ–≤", "‚öîÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫", "üîê JWT –∫–æ–¥–µ—Ä / –¥–µ–∫–æ–¥–µ—Ä"])

with tabs[0]:
    st.header("üé≤ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º")
    generator_type = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:", ["–°–ª—É—á–∞–π–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã", "GUID"])
    
    if generator_type == "–°–ª—É—á–∞–π–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã":
        alphabet_type = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∏–º–≤–æ–ª–æ–≤:", ["–ö–∏—Ä–∏–ª–ª–∏—Ü–∞", "–õ–∞—Ç–∏–Ω–∏—Ü–∞", "–ì–∏–±—Ä–∏–¥"])
        use_special = st.checkbox("–î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ —Ü–∏—Ñ—Ä—ã")
        num_chars = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤:", min_value=1, value=12, step=1)

        if 'generated_text' not in st.session_state:
            st.session_state.generated_text = ''

        if st.button("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"):
            if alphabet_type == "–ö–∏—Ä–∏–ª–ª–∏—Ü–∞":
                alphabet = cyrillic_letters
            elif alphabet_type == "–õ–∞—Ç–∏–Ω–∏—Ü–∞":
                alphabet = latin_letters
            else:
                alphabet = cyrillic_letters + latin_letters

            if use_special:
                alphabet += special_chars

            st.session_state.generated_text = ''.join(random.choice(alphabet) for _ in range(num_chars))

        if st.session_state.generated_text:
            st.code(st.session_state.generated_text, language="")
            copy_to_clipboard(st.session_state.generated_text, "copy-btn-gen")
    
    else:  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è GUID
        if st.button("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å GUID"):
            generated_guid = str(uuid.uuid4())
            st.code(generated_guid, language="")
            copy_to_clipboard(generated_guid, "copy-btn-guid")

with tabs[1]:
    st.header("üî† –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞ —Ç–µ–∫—Å—Ç–∞")
    user_text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:", height=200)
    col1, col2, col3 = st.columns(3)

    with col1:
        if st.button("–≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä"):
            result = user_text.lower()
            st.text_area("–†–µ–∑—É–ª—å—Ç–∞—Ç:", result, height=150, key="lower")
            copy_to_clipboard(result, "copy-btn-lower")

    with col2:
        if st.button("–í –í–ï–†–•–ù–ò–ô –†–ï–ì–ò–°–¢–†"):
            result = user_text.upper()
            st.text_area("–†–µ–∑—É–ª—å—Ç–∞—Ç:", result, height=150, key="upper")
            copy_to_clipboard(result, "copy-btn-upper")

    with col3:
        if st.button("–ö–∞–∫ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏"):
            result = '. '.join([s.strip().capitalize() for s in user_text.split('.')])
            st.text_area("–†–µ–∑—É–ª—å—Ç–∞—Ç:", result, height=150, key="sentence")
            copy_to_clipboard(result, "copy-btn-sentence")

with tabs[2]:
    st.header("üßÆ –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤")
    count_text = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞:", height=200, key="count_text_input")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üìä –ü–æ—Å—á–∏—Ç–∞—Ç—å"):
            if count_text:
                with col2:
                    st.write(f"**–í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤:** {len(count_text)}")
                with col3:
                    st.write(f"**–ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤:** {len(count_text.replace(' ', ''))}")
                with col4:
                    st.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤:** {len(count_text.split())}")
           
with tabs[3]:
    st.header("‚öîÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö —Ç–µ–∫—Å—Ç–æ–≤")
    col1, col2 = st.columns(2)

    with col1:
        text1 = st.text_area("–¢–µ–∫—Å—Ç 1", height=250, key="diff_input_1")
    with col2:
        text2 = st.text_area("–¢–µ–∫—Å—Ç 2", height=250, key="diff_input_2")

    if text1 and text2:
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("**–¢–µ–∫—Å—Ç 1 —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π:**")
            st.markdown(f"""
                <div style='white-space: pre-wrap; overflow-wrap: break-word; border:1px solid #ccc; padding:10px; border-radius:6px'>
                    {get_highlighted(text2, text1)}
                </div>
            """, unsafe_allow_html=True)
        with col2:
            st.markdown("**–¢–µ–∫—Å—Ç 2 —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π:**")
            st.markdown(f"""
                <div style='white-space: pre-wrap; overflow-wrap: break-word; border:1px solid #ccc; padding:10px; border-radius:6px'>
                    {get_highlighted(text1, text2)}
                </div>
            """, unsafe_allow_html=True)
            
with tabs[4]:
    st.header("üîê JWT –∫–æ–¥–µ—Ä / –¥–µ–∫–æ–¥–µ—Ä")
    st.subheader("–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JWT")

    algorithm = st.selectbox("–ê–ª–≥–æ—Ä–∏—Ç–º", AVAILABLE_ALGORITHMS, key="alg_select")
    jwt_input = st.text_area("–í—Å—Ç–∞–≤—å—Ç–µ JWT —Ç–æ–∫–µ–Ω", key="jwt_input")
    secret = st.text_input("–°–µ–∫—Ä–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", type="password")

    if st.button("üß© –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å"):
        try:
            decoded = jwt.decode(jwt_input, secret, algorithms=[algorithm]) if secret else jwt.decode(jwt_input, options={"verify_signature": False})
            st.code(json.dumps(decoded, indent=2, ensure_ascii=False), language="json")
        except InvalidTokenError as e:
            st.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω: {str(e)}")

    st.subheader("–°–æ–∑–¥–∞—Ç—å JWT")
    payload_input = st.text_area("–í–≤–µ–¥–∏—Ç–µ JSON payload", value='{"sub": "1234567890", "name": "John Doe", "iat": 1516239022}', key="jwt_payload")
    secret_encode = st.text_input("–°–µ–∫—Ä–µ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏", type="password", key="jwt_secret")

    if st.button("üîê –ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å"):
        try:
            payload_dict = json.loads(payload_input)
            token = jwt.encode(payload_dict, secret_encode, algorithm=algorithm)
            st.text_area("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JWT", value=token, height=100, key="jwt_result")
            copy_to_clipboard(token, "copy-jwt")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")